#define DEBUGLEVEL 2
#include "config.click"

//#define RAWDUMP
#define BRNFEEDBACK

#define CST cst
#define CST_PROCFILE "/proc/net/madwifi/NODEDEVICE/channel_utility"

#include "brn/helper.inc"
#include "brn/brn.click"
#include "device/wifidev_linkstat.click"

BRNAddressInfo(deviceaddress NODEDEVICE:eth);
wireless::BRN2Device(DEVICENAME "NODEDEVICE", ETHERADDRESS deviceaddress, DEVICETYPE "WIRELESS");

id::BRN2NodeIdentity(NAME NODENAME, DEVICES wireless);


lt::Brn2LinkTable(NODEIDENTITY id, STALE 500, DEBUG 2);

device_wifi::WIFIDEV(DEVNAME NODEDEVICE, DEVICE wireless, ETHERADDRESS deviceaddress, LT lt);


Idle()
  -> brn_clf::Classifier( 0/BRN_PORT_FLOW)  //Simpleflow
  -> sf::BRN2SimpleFlow(FLOW "deviceaddress 00:00:00:00:00:01 12 PACKETSIZE_PARAMS 0 60000 true 1 1000", FLOWSTARTRANDOM 50, DEBUG 2)
  -> BRN2EtherEncap(USEANNO true)
  -> device_wifi;

device_wifi[0] -> Idle();
device_wifi[1] -> BRN2EtherDecap() -> brn_clf;
device_wifi[2] -> Discard;

device_wifi[3]
  -> BRN2EtherDecap()
  -> Classifier( 0/BRN_PORT_FLOW )
  -> BRN2Decap()
  -> [1]sf;

Idle -> [1]device_wifi;
Idle -> [0]device_wifi;

Script(
  wait 1,
  write device_wifi/lp_suppressor.active0 false,
  wait 60,
  read device_wifi/wifidevice/tosq.stats,
  read device_wifi/wifidevice/tosq.bos,
  read device_wifi/wifidevice/cst.stats,
  read sf.stats
);
